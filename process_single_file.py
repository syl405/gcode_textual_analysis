#!/usr/bin/python
import re

def process_single_file(fs):
	'''Takes an NVPRO g-code file and outputs list of textual attributes. Also returns a naive estimate of print time based purely on moves.

	Inputs: 
	- NVPRO g-code file with .gcode suffix

	Outputs:
	- dictionary containing features (aka predictor vars.), including a naive print time estimate for this observation
		- keys: feature names
		- values: value of feature for this observation
	'''

	#Validate argument
	if type(fs) != 'file':
		raise TypeError('Argument fs wrong datatype. Expecting file')
	if ~fs.name.endswith('.gcode'):
		raise NameError('Argument fs refers to non-gcode file. Expecting .gcode suffix.')
	if fs.readline() ~= '; generated by NVBOTS':
		raise NameError('G-code file is missing NVBOTS-generated header')

	#Raw textual features
	num_lines_gcode = 0
	num_lines_comment = 0
	num_purges = 0
	num_lin_moves = 0
	total_dist_print = 0
	num_temp_change = 0
	num_retract = 0
	num_unretract = 0
	length_extruded = 0
	num_temp_check = 0
	num_fan_on = 0
	num_fan_off = 0

	#Raft and print parameters
	seam_position = 0
	fill_angle = 0
	fill_density = 0
	fill_pattern = 0
	retract_length = 0
	nozzle_diameter = 0
	bottom_solid_layers = 0
	top_solid_layers = 0
	external_perimeter_speed_multiplier = 0
	small_perimeter_speed_multiplier = 0
	gap_fill_speed_multiplier = 0
	infill_speed_multiplier = 0
	solid_infill_speed_multiplier = 0
	top_solid_infill_speed_multiplier = 0
	support_material_interface_speed_multiplier = 0
	support_material_speed = 0
	base_travel_speed = 0
	default_acceleration = 0
	infill_acceleration = 0
	perimeter_acceleration = 0

	#Toggle variables to handle blocks of codes
	in_purge = 0
	in_header = 0
	in_footer = 0

	#Compiled regex patterns
	move_pattern = ';((?:X|Y|E|F)\d+\.?\d*)'
	move_regex = re.compile(move_pattern)

	#Options dictionary for parsing X, Y, E, F numbers
	xyef_opts = {'X': lambda axis_str:float(axis_str(1:-1)),
				 'Y': lambda axis_str:float(axis_str(1:-1)),
				 'E': lambda axis_str:float(axis_str(1:-1)),
				 'F': lambda axis_str:float(axis_str(1:-1))}

	#Read in header
	cur_line = fs.readline() #read first line
	while cur_line.startswith(';'): #exit when past initial block of comments
		num_lines_gcode += 1
		num_lines_comment += 1
		cur_line = fs.readline() #read next line

	#Iterate through remainder of lines
	while cur_line: #Exit loop when cur_line is empty, i.e. EOF
		if cur_line.startswith(';'):
			num_lines_comment += 1
			if cur_line == '; Begin move/purge/wipe gcode': #detect start of purge routine
				num_purges += 1
				in_purge = 1
			elif cur_line == '; End move/purge/wipe gcode':
				in_purge = 0
		elif cur_line.startswith('G0 ') or cur_line.startswith('G1 '):
			match_lists = move_regex.findall(cur_line)
			for i in match_lists:

		elif cur_line.startswith('G1 '):


		elif cur_line.startswith('G10'):
			num_retract += 1
		elif cur_line.startswith('G11'):
			num_unretract += 1


			

				

		num_lines_gcode += 1
		cur_line = fs.readline()

		
